From 49a846ac80ba7c7125466f9c69d505bdaa91a7f8 Mon Sep 17 00:00:00 2001
From: Tadeo Kondrak <me@tadeo.ca>
Date: Tue, 15 Dec 2020 21:24:57 -0700
Subject: [PATCH] text_input: Implement input-method popups

---
 include/sway/input/text_input.h |  20 ++
 include/sway/layers.h           |  11 ++
 include/sway/tree/view.h        |   2 +
 sway/desktop/layer_shell.c      |  91 +++++++++
 sway/desktop/output.c           |   4 +-
 sway/input/cursor.c             |   4 +-
 sway/input/text_input.c         | 323 +++++++++++++++++++++++++++++++-
 sway/tree/container.c           |  13 +-
 sway/tree/view.c                |  52 +++++
 9 files changed, 509 insertions(+), 11 deletions(-)

diff --git a/include/sway/input/text_input.h b/include/sway/input/text_input.h
index 37744266d9..15fe00e6e5 100644
--- a/include/sway/input/text_input.h
+++ b/include/sway/input/text_input.h
@@ -22,18 +22,38 @@ struct sway_input_method_relay {
 	struct sway_seat *seat;
 
 	struct wl_list text_inputs; // sway_text_input::link
+	struct wl_list input_popups; // sway_input_popup::link
 	struct wlr_input_method_v2 *input_method; // doesn't have to be present
 
 	struct wl_listener text_input_new;
 
 	struct wl_listener input_method_new;
 	struct wl_listener input_method_commit;
+	struct wl_listener input_method_new_popup_surface;
 	struct wl_listener input_method_grab_keyboard;
 	struct wl_listener input_method_destroy;
 
 	struct wl_listener input_method_keyboard_grab_destroy;
 };
 
+struct sway_input_popup {
+	struct sway_input_method_relay *relay;
+	struct wlr_input_popup_surface_v2 *popup_surface;
+
+	int x, y;
+	bool visible;
+
+	struct wl_list link;
+	struct wl_list view_link;
+
+	struct wl_listener popup_map;
+	struct wl_listener popup_unmap;
+	struct wl_listener popup_destroy;
+	struct wl_listener popup_surface_commit;
+
+	struct wl_listener focused_surface_unmap;
+};
+
 struct sway_text_input {
 	struct sway_input_method_relay *relay;
 
diff --git a/include/sway/layers.h b/include/sway/layers.h
index 457634c24e..31c9ed71b2 100644
--- a/include/sway/layers.h
+++ b/include/sway/layers.h
@@ -24,6 +24,8 @@ struct sway_layer_surface {
 
 	struct wlr_box geo;
 	enum zwlr_layer_shell_v1_layer layer;
+
+	struct wl_list input_popups;
 };
 
 struct sway_layer_popup {
@@ -55,5 +57,14 @@ void arrange_layers(struct sway_output *output);
 
 struct sway_layer_surface *layer_from_wlr_layer_surface_v1(
 	struct wlr_layer_surface_v1 *layer_surface);
+struct wlr_surface *sway_layer_surface_surface_at(
+	struct sway_layer_surface *layer,
+	double sx, double sy, double *sub_x, double *sub_y);
+void sway_layer_surface_for_each_surface(
+	struct sway_layer_surface *layer,
+	wlr_surface_iterator_func_t iterator, void *user_data);
+void sway_layer_surface_for_each_popup_surface(
+	struct sway_layer_surface *layer,
+	wlr_surface_iterator_func_t iterator, void *user_data);
 
 #endif
diff --git a/include/sway/tree/view.h b/include/sway/tree/view.h
index 86bd981c33..8a3f4d7817 100644
--- a/include/sway/tree/view.h
+++ b/include/sway/tree/view.h
@@ -103,6 +103,8 @@ struct sway_view {
 	struct wl_listener foreign_close_request;
 	struct wl_listener foreign_destroy;
 
+	struct wl_list input_popups;
+
 	bool destroying;
 
 	list_t *executed_criteria; // struct criteria *
diff --git a/sway/desktop/layer_shell.c b/sway/desktop/layer_shell.c
index c5b6d19ca0..934f8fd79e 100644
--- a/sway/desktop/layer_shell.c
+++ b/sway/desktop/layer_shell.c
@@ -345,6 +345,12 @@ static void handle_destroy(struct wl_listener *listener, void *data) {
 	if (sway_layer->layer_surface->mapped) {
 		unmap(sway_layer);
 	}
+	struct sway_input_popup *popup, *tmp_popup;
+	wl_list_for_each_safe(
+			popup, tmp_popup, &sway_layer->input_popups, view_link) {
+		wl_list_remove(&popup->view_link);
+		wl_list_init(&popup->view_link);
+	}
 	wl_list_remove(&sway_layer->link);
 	wl_list_remove(&sway_layer->destroy.link);
 	wl_list_remove(&sway_layer->map.link);
@@ -585,6 +591,89 @@ struct sway_layer_surface *layer_from_wlr_layer_surface_v1(
 	return layer_surface->data;
 }
 
+struct wlr_surface *sway_layer_surface_surface_at(
+		struct sway_layer_surface *layer,
+		double sx, double sy, double *sub_x, double *sub_y) {
+	struct sway_input_popup *popup;
+	wl_list_for_each(popup, &layer->input_popups, view_link) {
+		if (!popup->popup_surface->mapped || !popup->visible) {
+			continue;
+		}
+		struct wlr_surface *surface = wlr_surface_surface_at(
+			popup->popup_surface->surface,
+			sx - popup->x, sy - popup->y, sub_x, sub_y);
+		if (surface != NULL) {
+			*sub_x += popup->x;
+			*sub_y += popup->y;
+			return surface;
+		}
+	}
+	return wlr_layer_surface_v1_surface_at(
+		layer->layer_surface, sx, sy, sub_x, sub_y);
+}
+
+struct offset_iterator_data {
+	int offset_x, offset_y;
+	wlr_surface_iterator_func_t iterator;
+	void *user_data;
+};
+
+static void offset_iterator(struct wlr_surface *surface,
+		int sx, int sy, void *user_data) {
+	struct offset_iterator_data *data = user_data;
+	data->iterator(
+		surface, sx + data->offset_x, sy + data->offset_y, data->user_data);
+}
+
+void sway_layer_surface_for_each_surface(
+		struct sway_layer_surface *layer,
+		wlr_surface_iterator_func_t iterator, void *user_data) {
+	wlr_layer_surface_v1_for_each_surface(layer->layer_surface,
+		iterator, user_data);
+
+	struct sway_input_popup *popup;
+	wl_list_for_each(popup, &layer->input_popups, view_link) {
+		if (!popup->popup_surface->mapped || !popup->visible) {
+			continue;
+		}
+
+		struct wlr_surface *surface = popup->popup_surface->surface;
+		struct offset_iterator_data data = {
+			.iterator = iterator,
+			.user_data = user_data,
+			.offset_x = popup->x,
+			.offset_y = popup->y,
+		};
+
+		wlr_surface_for_each_surface(surface, offset_iterator, &data);
+	}
+}
+
+
+void sway_layer_surface_for_each_popup_surface(
+		struct sway_layer_surface *layer,
+		wlr_surface_iterator_func_t iterator, void *user_data) {
+	wlr_layer_surface_v1_for_each_popup_surface(layer->layer_surface,
+		iterator, user_data);
+
+	struct sway_input_popup *popup;
+	wl_list_for_each(popup, &layer->input_popups, view_link) {
+		if (!popup->popup_surface->mapped || !popup->visible) {
+			continue;
+		}
+
+		struct wlr_surface *surface = popup->popup_surface->surface;
+		struct offset_iterator_data data = {
+			.iterator = iterator,
+			.user_data = user_data,
+			.offset_x = popup->x,
+			.offset_y = popup->y,
+		};
+
+		wlr_surface_for_each_surface(surface, offset_iterator, &data);
+	}
+}
+
 void handle_layer_shell_surface(struct wl_listener *listener, void *data) {
 	struct wlr_layer_surface_v1 *layer_surface = data;
 	sway_log(SWAY_DEBUG, "new layer surface: namespace %s layer %d anchor %" PRIu32
@@ -628,6 +717,8 @@ void handle_layer_shell_surface(struct wl_listener *listener, void *data) {
 		return;
 	}
 
+	wl_list_init(&sway_layer->input_popups);
+
 	sway_layer->surface_commit.notify = handle_surface_commit;
 	wl_signal_add(&layer_surface->surface->events.commit,
 		&sway_layer->surface_commit);
diff --git a/sway/desktop/output.c b/sway/desktop/output.c
index cf4a96072f..cd97d25697 100644
--- a/sway/desktop/output.c
+++ b/sway/desktop/output.c
@@ -218,7 +218,7 @@ void output_layer_for_each_surface(struct sway_output *output,
 			.height = surface->current.height,
 			.rotation = 0,
 		};
-		wlr_layer_surface_v1_for_each_surface(wlr_layer_surface_v1,
+		sway_layer_surface_for_each_surface(layer_surface,
 			output_for_each_surface_iterator, &data);
 	}
 }
@@ -256,7 +256,7 @@ void output_layer_for_each_popup_surface(struct sway_output *output,
 			.height = surface->current.height,
 			.rotation = 0,
 		};
-		wlr_layer_surface_v1_for_each_popup_surface(wlr_layer_surface_v1,
+		sway_layer_surface_for_each_popup_surface(layer_surface,
 			output_for_each_surface_iterator, &data);
 	}
 }
diff --git a/sway/input/cursor.c b/sway/input/cursor.c
index cbb5c6e977..f7492934bd 100644
--- a/sway/input/cursor.c
+++ b/sway/input/cursor.c
@@ -37,8 +37,8 @@ static struct wlr_surface *layer_surface_at(struct sway_output *output,
 	wl_list_for_each_reverse(sway_layer, layer, link) {
 		double _sx = ox - sway_layer->geo.x;
 		double _sy = oy - sway_layer->geo.y;
-		struct wlr_surface *sub = wlr_layer_surface_v1_surface_at(
-			sway_layer->layer_surface, _sx, _sy, sx, sy);
+		struct wlr_surface *sub = sway_layer_surface_surface_at(
+			sway_layer, _sx, _sy, sx, sy);
 		if (sub) {
 			return sub;
 		}
diff --git a/sway/input/text_input.c b/sway/input/text_input.c
index b8c19c179e..cb32fb5cb1 100644
--- a/sway/input/text_input.c
+++ b/sway/input/text_input.c
@@ -3,6 +3,11 @@
 #include "log.h"
 #include "sway/input/seat.h"
 #include "sway/input/text_input.h"
+#include "sway/tree/view.h"
+#include "sway/tree/container.h"
+#include "sway/desktop.h"
+#include "sway/output.h"
+#include "sway/layers.h"
 
 static struct sway_text_input *relay_get_focusable_text_input(
 		struct sway_input_method_relay *relay) {
@@ -26,6 +31,300 @@ static struct sway_text_input *relay_get_focused_text_input(
 	return NULL;
 }
 
+static void input_popup_damage(struct sway_input_popup *popup) {
+	if (!popup->popup_surface->mapped || !popup->visible) {
+		return;
+	}
+
+	struct sway_text_input *text_input =
+		relay_get_focused_text_input(popup->relay);
+	if (text_input == NULL || text_input->input->focused_surface == NULL) {
+		return;
+	}
+
+	struct wlr_surface *focused_surface = text_input->input->focused_surface;
+	if (wlr_surface_is_layer_surface(focused_surface)) {
+		struct wlr_layer_surface_v1 *layer_surface =
+			wlr_layer_surface_v1_from_wlr_surface(focused_surface);
+		struct sway_layer_surface *layer =
+			layer_from_wlr_layer_surface_v1(layer_surface);
+		output_damage_surface(layer->layer_surface->output->data,
+			layer->geo.x + popup->x, layer->geo.y + popup->y,
+			popup->popup_surface->surface, true);
+		return;
+	}
+
+	struct sway_view *view = view_from_wlr_surface(
+		text_input->input->focused_surface);
+	desktop_damage_surface(popup->popup_surface->surface,
+		view->container->surface_x - view->geometry.x + popup->x,
+		view->container->surface_y - view->geometry.y + popup->y, true);
+}
+
+static void input_popup_update(struct sway_input_popup *popup) {
+	input_popup_damage(popup);
+
+	struct sway_text_input *text_input =
+		relay_get_focused_text_input(popup->relay);
+
+	if (text_input == NULL || text_input->input->focused_surface == NULL) {
+		return;
+	}
+
+	if (!popup->popup_surface->mapped) {
+		return;
+	}
+
+	bool cursor_rect = text_input->input->current.features
+		& WLR_TEXT_INPUT_V3_FEATURE_CURSOR_RECTANGLE;
+	struct wlr_surface *focused_surface = text_input->input->focused_surface;
+	struct wlr_box cursor = text_input->input->current.cursor_rectangle;
+
+	struct wlr_output *output;
+	struct wlr_box *output_box;
+	struct wlr_box parent;
+	if (wlr_surface_is_layer_surface(focused_surface)) {
+		struct wlr_layer_surface_v1 *layer_surface =
+			wlr_layer_surface_v1_from_wlr_surface(focused_surface);
+		struct sway_layer_surface *layer =
+			layer_from_wlr_layer_surface_v1(layer_surface);
+		output = layer->layer_surface->output;
+		output_box = wlr_output_layout_get_box(root->output_layout, output);
+		parent = layer->geo;
+		parent.x += output_box->x;
+		parent.y += output_box->y;
+	} else {
+		struct sway_view *view = view_from_wlr_surface(focused_surface);
+		output = wlr_output_layout_output_at(root->output_layout,
+			view->container->surface_x + view->geometry.x,
+			view->container->surface_y + view->geometry.y);
+		output_box = wlr_output_layout_get_box(root->output_layout, output);
+		parent.x = view->container->surface_x + view->geometry.x;
+		parent.y = view->container->surface_y + view->geometry.y;
+		parent.width = view->geometry.width;
+		parent.height = view->geometry.height;
+	}
+
+	if (!cursor_rect) {
+		cursor.x = 0;
+		cursor.y = 0;
+		cursor.width = parent.width;
+		cursor.height = parent.height;
+	}
+
+	int popup_width = popup->popup_surface->surface->current.width;
+	int popup_height = popup->popup_surface->surface->current.height;
+	int x1 = parent.x + cursor.x;
+	int x2 = parent.x + cursor.x + cursor.width;
+	int y1 = parent.y + cursor.y;
+	int y2 = parent.y + cursor.y + cursor.height;
+	int x = x1;
+	int y = y2;
+
+	int available_right = output_box->x + output_box->width - x1;
+	int available_left = x2 - output_box->x;
+	if (available_right < popup_width && available_left > available_right) {
+		x = x2 - popup_width;
+	}
+
+	int available_down = output_box->y + output_box->height - y2;
+	int available_up = y1 - output_box->y;
+	if (available_down < popup_height && available_up > available_down) {
+		y = y1 - popup_height;
+	}
+
+	popup->x = x - parent.x;
+	popup->y = y - parent.y;
+
+	// Hide popup if cursor position is completely out of bounds
+	bool x1_in_bounds = (cursor.x >= 0 && cursor.x < parent.width);
+	bool y1_in_bounds = (cursor.y >= 0 && cursor.y < parent.height);
+	bool x2_in_bounds = (cursor.x + cursor.width >= 0
+		&& cursor.x + cursor.width < parent.width);
+	bool y2_in_bounds = (cursor.y + cursor.height >= 0
+		&& cursor.y + cursor.height < parent.height);
+	popup->visible =
+		(x1_in_bounds && y1_in_bounds) || (x2_in_bounds && y2_in_bounds);
+
+	if (cursor_rect) {
+		struct wlr_box box = {
+			.x = x1 - x,
+			.y = y1 - y,
+			.width = cursor.width,
+			.height = cursor.height,
+		};
+		wlr_input_popup_surface_v2_send_text_input_rectangle(
+			popup->popup_surface, &box);
+	}
+
+	input_popup_damage(popup);
+}
+
+static void surface_send_enter_iterator(struct wlr_surface *surface,
+		int x, int y, void *data) {
+	struct wlr_output *wlr_output = data;
+	wlr_surface_send_enter(surface, wlr_output);
+}
+
+static void surface_send_leave_iterator(struct wlr_surface *surface,
+		int x, int y, void *data) {
+	struct wlr_output *wlr_output = data;
+	wlr_surface_send_leave(surface, wlr_output);
+}
+
+static void input_popup_send_outputs(struct sway_input_popup *popup,
+		wlr_surface_iterator_func_t iterator) {
+	struct sway_text_input *text_input =
+		relay_get_focused_text_input(popup->relay);
+	if (text_input == NULL || text_input->input->focused_surface == NULL) {
+		return;
+	}
+	struct wlr_surface *focused_surface = text_input->input->focused_surface;
+	if (wlr_surface_is_layer_surface(focused_surface)) {
+		struct wlr_layer_surface_v1 *layer_surface =
+			wlr_layer_surface_v1_from_wlr_surface(focused_surface);
+		struct sway_layer_surface *layer =
+			layer_from_wlr_layer_surface_v1(layer_surface);
+		wlr_surface_for_each_surface(popup->popup_surface->surface,
+			iterator, layer->layer_surface->output);
+		return;
+	}
+	struct sway_view *view = view_from_wlr_surface(focused_surface);
+	for (int i = 0; i < view->container->outputs->length; i++) {
+		struct sway_output *output = view->container->outputs->items[i];
+		wlr_surface_for_each_surface(popup->popup_surface->surface,
+			iterator, output->wlr_output);
+	}
+}
+
+static void handle_im_popup_map(struct wl_listener *listener, void *data) {
+	struct sway_input_popup *popup =
+		wl_container_of(listener, popup, popup_map);
+	input_popup_send_outputs(popup, surface_send_enter_iterator);
+	input_popup_update(popup);
+}
+
+static void handle_im_popup_unmap(struct wl_listener *listener, void *data) {
+	struct sway_input_popup *popup =
+		wl_container_of(listener, popup, popup_unmap);
+	input_popup_send_outputs(popup, surface_send_leave_iterator);
+	input_popup_update(popup);
+}
+
+static void handle_im_popup_destroy(struct wl_listener *listener, void *data) {
+	struct sway_input_popup *popup =
+		wl_container_of(listener, popup, popup_destroy);
+	wl_list_remove(&popup->focused_surface_unmap.link);
+	wl_list_remove(&popup->popup_surface_commit.link);
+	wl_list_remove(&popup->popup_destroy.link);
+	wl_list_remove(&popup->popup_unmap.link);
+	wl_list_remove(&popup->popup_map.link);
+	wl_list_remove(&popup->view_link);
+	wl_list_remove(&popup->link);
+	free(popup);
+}
+
+static void handle_im_popup_surface_commit(struct wl_listener *listener,
+		void *data) {
+	struct sway_input_popup *popup =
+		wl_container_of(listener, popup, popup_surface_commit);
+	input_popup_update(popup);
+}
+
+static void handle_im_focused_surface_destroy(
+		struct wl_listener *listener, void *data) {
+	struct sway_input_popup *popup =
+		wl_container_of(listener, popup, focused_surface_unmap);
+	wl_list_remove(&popup->view_link);
+	wl_list_init(&popup->view_link);
+	input_popup_update(popup);
+}
+
+static void input_popup_set_focus(struct sway_input_popup *popup,
+		struct wlr_surface *surface) {
+	wl_list_remove(&popup->view_link);
+	wl_list_remove(&popup->focused_surface_unmap.link);
+
+	if (surface == NULL) {
+		wl_list_init(&popup->view_link);
+		wl_list_init(&popup->focused_surface_unmap.link);
+		input_popup_update(popup);
+		return;
+	}
+
+	if (wlr_surface_is_layer_surface(surface)) {
+		struct wlr_layer_surface_v1 *layer_surface =
+			wlr_layer_surface_v1_from_wlr_surface(surface);
+		struct sway_layer_surface *layer =
+			layer_from_wlr_layer_surface_v1(layer_surface);
+		wl_list_insert(&layer->input_popups, &popup->view_link);
+		wl_signal_add(
+			&layer->layer_surface->events.unmap, &popup->focused_surface_unmap);
+		input_popup_update(popup);
+		return;
+	}
+
+	struct sway_view *view = view_from_wlr_surface(surface);
+	wl_list_insert(&view->input_popups, &popup->view_link);
+	wl_signal_add(&view->events.unmap, &popup->focused_surface_unmap);
+	input_popup_update(popup);
+}
+
+static void handle_im_new_popup_surface(struct wl_listener *listener,
+		void *data) {
+	struct sway_input_method_relay *relay = wl_container_of(listener, relay,
+		input_method_new_popup_surface);
+	struct sway_input_popup *popup = calloc(1, sizeof(*popup));
+	popup->relay = relay;
+	popup->popup_surface = data;
+	popup->popup_surface->data = popup;
+
+	wl_list_init(&popup->view_link);
+
+	wl_signal_add(&popup->popup_surface->events.map, &popup->popup_map);
+	popup->popup_map.notify = handle_im_popup_map;
+	wl_signal_add(
+		&popup->popup_surface->events.unmap, &popup->popup_unmap);
+	popup->popup_unmap.notify = handle_im_popup_unmap;
+	wl_signal_add(
+		&popup->popup_surface->events.destroy, &popup->popup_destroy);
+	popup->popup_destroy.notify = handle_im_popup_destroy;
+	wl_signal_add(&popup->popup_surface->surface->events.commit,
+		&popup->popup_surface_commit);
+	popup->popup_surface_commit.notify = handle_im_popup_surface_commit;
+	wl_list_init(&popup->focused_surface_unmap.link);
+	popup->focused_surface_unmap.notify = handle_im_focused_surface_destroy;
+
+	struct sway_text_input *text_input = relay_get_focused_text_input(relay);
+	if (text_input != NULL) {
+		input_popup_set_focus(popup, text_input->input->focused_surface);
+	} else {
+		input_popup_set_focus(popup, NULL);
+	}
+
+	wl_list_insert(&relay->input_popups, &popup->link);
+}
+
+static void text_input_send_enter(struct sway_text_input *text_input,
+		struct wlr_surface *surface) {
+	wlr_text_input_v3_send_enter(text_input->input, surface);
+	struct sway_input_popup *popup;
+	wl_list_for_each(popup, &text_input->relay->input_popups, link) {
+		input_popup_set_focus(popup, surface);
+	}
+}
+
+static void text_input_send_leave(struct sway_text_input *text_input,
+		struct wlr_surface *surface) {
+	wlr_text_input_v3_send_leave(text_input->input);
+	if (text_input->input->focused_surface == surface) {
+		struct sway_input_popup *popup;
+		wl_list_for_each(popup, &text_input->relay->input_popups, link) {
+			input_popup_set_focus(popup, NULL);
+		}
+	}
+}
+
 static void handle_im_commit(struct wl_listener *listener, void *data) {
 	struct sway_input_method_relay *relay = wl_container_of(listener, relay,
 		input_method_commit);
@@ -53,6 +352,10 @@ static void handle_im_commit(struct wl_listener *listener, void *data) {
 			context->current.delete.after_length);
 	}
 	wlr_text_input_v3_send_done(text_input->input);
+	struct sway_input_popup *popup;
+	wl_list_for_each(popup, &relay->input_popups, link) {
+		input_popup_update(popup);
+	}
 }
 
 static void handle_im_keyboard_grab_destroy(struct wl_listener *listener, void *data) {
@@ -111,7 +414,7 @@ static void handle_im_destroy(struct wl_listener *listener, void *data) {
 		// the input method returns
 		text_input_set_pending_focused_surface(text_input,
 			text_input->input->focused_surface);
-		wlr_text_input_v3_send_leave(text_input->input);
+		text_input_send_leave(text_input, text_input->input->focused_surface);
 	}
 }
 
@@ -135,8 +438,12 @@ static void relay_send_im_state(struct sway_input_method_relay *relay,
 			input->current.content_type.hint,
 			input->current.content_type.purpose);
 	}
+	struct sway_input_popup *popup;
+	wl_list_for_each(popup, &relay->input_popups, link) {
+		input_popup_update(popup);
+	}
 	wlr_input_method_v2_send_done(input_method);
-	// TODO: pass intent, display popup size
+	// TODO: pass intent
 }
 
 static void handle_text_input_enable(struct wl_listener *listener, void *data) {
@@ -276,6 +583,9 @@ static void relay_handle_input_method(struct wl_listener *listener,
 	wl_signal_add(&relay->input_method->events.commit,
 		&relay->input_method_commit);
 	relay->input_method_commit.notify = handle_im_commit;
+	wl_signal_add(&relay->input_method->events.new_popup_surface,
+		&relay->input_method_new_popup_surface);
+	relay->input_method_new_popup_surface.notify = handle_im_new_popup_surface;
 	wl_signal_add(&relay->input_method->events.grab_keyboard,
 		&relay->input_method_grab_keyboard);
 	relay->input_method_grab_keyboard.notify = handle_im_grab_keyboard;
@@ -285,8 +595,7 @@ static void relay_handle_input_method(struct wl_listener *listener,
 
 	struct sway_text_input *text_input = relay_get_focusable_text_input(relay);
 	if (text_input) {
-		wlr_text_input_v3_send_enter(text_input->input,
-			text_input->pending_focused_surface);
+		text_input_send_enter(text_input, text_input->pending_focused_surface);
 		text_input_set_pending_focused_surface(text_input, NULL);
 	}
 }
@@ -295,6 +604,7 @@ void sway_input_method_relay_init(struct sway_seat *seat,
 		struct sway_input_method_relay *relay) {
 	relay->seat = seat;
 	wl_list_init(&relay->text_inputs);
+	wl_list_init(&relay->input_popups);
 
 	relay->text_input_new.notify = relay_handle_text_input;
 	wl_signal_add(&server.text_input->events.text_input,
@@ -323,8 +633,9 @@ void sway_input_method_relay_set_focus(struct sway_input_method_relay *relay,
 		} else if (text_input->input->focused_surface) {
 			assert(text_input->pending_focused_surface == NULL);
 			if (surface != text_input->input->focused_surface) {
+				text_input_send_leave(
+					text_input, text_input->input->focused_surface);
 				relay_disable_text_input(relay, text_input);
-				wlr_text_input_v3_send_leave(text_input->input);
 			} else {
 				sway_log(SWAY_DEBUG, "IM relay set_focus already focused");
 				continue;
@@ -335,7 +646,7 @@ void sway_input_method_relay_set_focus(struct sway_input_method_relay *relay,
 				&& wl_resource_get_client(text_input->input->resource)
 				== wl_resource_get_client(surface->resource)) {
 			if (relay->input_method) {
-				wlr_text_input_v3_send_enter(text_input->input, surface);
+				text_input_send_enter(text_input, surface);
 			} else {
 				text_input_set_pending_focused_surface(text_input, surface);
 			}
diff --git a/sway/tree/container.c b/sway/tree/container.c
index 68fbec2fd8..9a76f065b0 100644
--- a/sway/tree/container.c
+++ b/sway/tree/container.c
@@ -192,6 +192,17 @@ static struct sway_container *surface_at_view(struct sway_container *con, double
 				view_sx, view_sy, &_sx, &_sy);
 		break;
 	}
+	struct sway_input_popup *popup;
+	wl_list_for_each(popup, &view->input_popups, view_link) {
+		if (!popup->popup_surface->mapped
+				|| !popup->visible) {
+			continue;
+		}
+		_surface = wlr_surface_surface_at(
+			popup->popup_surface->surface,
+			view_sx - popup->x, view_sy - popup->y,
+			&_sx, &_sy);
+	}
 	if (_surface) {
 		*sx = _sx;
 		*sy = _sy;
@@ -393,7 +404,7 @@ static bool surface_is_popup(struct wlr_surface *surface) {
 		return false;
 	}
 
-	return false;
+	return wlr_surface_is_input_popup_surface_v2(surface);
 }
 
 struct sway_container *container_at(struct sway_workspace *workspace,
diff --git a/sway/tree/view.c b/sway/tree/view.c
index 8a2a8178df..8d16b4a4ce 100644
--- a/sway/tree/view.c
+++ b/sway/tree/view.c
@@ -41,6 +41,7 @@ void view_init(struct sway_view *view, enum sway_view_type type,
 	view->allow_request_urgent = true;
 	view->shortcuts_inhibit = SHORTCUTS_INHIBIT_DEFAULT;
 	wl_signal_init(&view->events.unmap);
+	wl_list_init(&view->input_popups);
 }
 
 void view_destroy(struct sway_view *view) {
@@ -74,6 +75,11 @@ void view_begin_destroy(struct sway_view *view) {
 	if (!sway_assert(view->surface == NULL, "Tried to destroy a mapped view")) {
 		return;
 	}
+	struct sway_input_popup *popup, *tmp_popup;
+	wl_list_for_each_safe(popup, tmp_popup, &view->input_popups, view_link) {
+		wl_list_remove(&popup->view_link);
+		wl_list_init(&popup->view_link);
+	}
 	view->destroying = true;
 
 	if (!view->container) {
@@ -437,6 +443,19 @@ void view_damage_from(struct sway_view *view) {
 	}
 }
 
+struct offset_iterator_data {
+	int offset_x, offset_y;
+	wlr_surface_iterator_func_t iterator;
+	void *user_data;
+};
+
+static void offset_iterator(struct wlr_surface *surface,
+		int sx, int sy, void *user_data) {
+	struct offset_iterator_data *data = user_data;
+	data->iterator(
+		surface, sx + data->offset_x, sy + data->offset_y, data->user_data);
+}
+
 void view_for_each_surface(struct sway_view *view,
 		wlr_surface_iterator_func_t iterator, void *user_data) {
 	if (!view->surface) {
@@ -447,6 +466,21 @@ void view_for_each_surface(struct sway_view *view,
 	} else {
 		wlr_surface_for_each_surface(view->surface, iterator, user_data);
 	}
+	struct sway_input_popup *popup;
+	wl_list_for_each(popup, &view->input_popups, view_link) {
+		if (!popup->popup_surface->mapped
+				|| !popup->visible) {
+			continue;
+		}
+		struct offset_iterator_data offset_data = {
+			.offset_x = popup->x,
+			.offset_y = popup->y,
+			.iterator = iterator,
+			.user_data = user_data,
+		};
+		wlr_surface_for_each_surface(
+			popup->popup_surface->surface, offset_iterator, &offset_data);
+	}
 }
 
 void view_for_each_popup_surface(struct sway_view *view,
@@ -457,6 +491,21 @@ void view_for_each_popup_surface(struct sway_view *view,
 	if (view->impl->for_each_popup_surface) {
 		view->impl->for_each_popup_surface(view, iterator, user_data);
 	}
+	struct sway_input_popup *popup;
+	wl_list_for_each(popup, &view->input_popups, view_link) {
+		if (!popup->popup_surface->mapped
+				|| !popup->visible) {
+			continue;
+		}
+		struct offset_iterator_data offset_data = {
+			.offset_x = popup->x,
+			.offset_y = popup->y,
+			.iterator = iterator,
+			.user_data = user_data,
+		};
+		wlr_surface_for_each_surface(
+			popup->popup_surface->surface, offset_iterator, &offset_data);
+	}
 }
 
 static void view_subsurface_create(struct sway_view *view,
@@ -1156,6 +1205,9 @@ struct sway_view *view_from_wlr_surface(struct wlr_surface *wlr_surface) {
 	if (wlr_surface_is_layer_surface(wlr_surface)) {
 		return NULL;
 	}
+	if (wlr_surface_is_input_popup_surface_v2(wlr_surface)) {
+		return NULL;
+	}
 
 	const char *role = wlr_surface->role ? wlr_surface->role->name : NULL;
 	sway_log(SWAY_DEBUG, "Surface of unknown type (role %s): %p",
